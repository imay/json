
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Sun Jan 11 19:35:16 CST 2015
//----------------------------------------------------

package com.github.imay.json;

import java_cup.runtime.Symbol;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonNull;
import java.util.List;
import java.util.Map;

/** CUP v0.11a czt01 beta generated parser.
  * @version Sun Jan 11 19:35:16 CST 2015
  */
public class JsonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JsonParser() {super();}

  /** Constructor which sets the default scanner. */
  public JsonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JsonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\002\005\000" +
    "\002\007\005\000\002\011\002\000\002\011\003\000\002" +
    "\010\003\000\002\010\005\000\002\003\005\000\002\005" +
    "\002\000\002\005\003\000\002\006\003\000\002\006\005" +
    "" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\020\006\004\010\015\012\005\013\012\014" +
    "\007\015\010\016\013\001\002\000\006\007\ufff7\015\027" +
    "\001\002\000\012\002\ufffe\005\ufffe\007\ufffe\011\ufffe\001" +
    "\002\000\012\002\ufffb\005\ufffb\007\ufffb\011\ufffb\001\002" +
    "\000\012\002\ufffc\005\ufffc\007\ufffc\011\ufffc\001\002\000" +
    "\012\002\000\005\000\007\000\011\000\001\002\000\012" +
    "\002\ufffa\005\ufffa\007\ufffa\011\ufffa\001\002\000\012\002" +
    "\ufffd\005\ufffd\007\ufffd\011\ufffd\001\002\000\012\002\uffff" +
    "\005\uffff\007\uffff\011\uffff\001\002\000\004\002\024\001" +
    "\002\000\022\006\004\010\015\011\ufff2\012\005\013\012" +
    "\014\007\015\010\016\013\001\002\000\004\011\023\001" +
    "\002\000\006\005\021\011\ufff1\001\002\000\006\005\ufff0" +
    "\011\ufff0\001\002\000\020\006\004\010\015\012\005\013" +
    "\012\014\007\015\010\016\013\001\002\000\006\005\uffef" +
    "\011\uffef\001\002\000\012\002\ufff3\005\ufff3\007\ufff3\011" +
    "\ufff3\001\002\000\004\002\001\001\002\000\006\005\034" +
    "\007\ufff6\001\002\000\006\005\ufff5\007\ufff5\001\002\000" +
    "\004\004\032\001\002\000\004\007\031\001\002\000\012" +
    "\002\ufff9\005\ufff9\007\ufff9\011\ufff9\001\002\000\020\006" +
    "\004\010\015\012\005\013\012\014\007\015\010\016\013" +
    "\001\002\000\006\005\ufff8\007\ufff8\001\002\000\004\015" +
    "\027\001\002\000\006\005\ufff4\007\ufff4\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\010\002\005\003\010\004\013\001\001\000" +
    "\010\007\025\010\024\011\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\005\003\010\004\017\005\015\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\005\003\010\004\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\005\003\010\004\032" +
    "\001\001\000\002\001\001\000\004\007\034\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JsonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$JsonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JsonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JsonParser$actions {
  private final JsonParser parser;

  /** Constructor */
  CUP$JsonParser$actions(JsonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JsonParser$result;

      /* select the action based on the action number */
      switch (CUP$JsonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value_list ::= value_list COMMA value 
            {
               CUP$JsonParser$result = case18(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value_list ::= value 
            {
               CUP$JsonParser$result = case17(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_value_list ::= value_list 
            {
               CUP$JsonParser$result = case16(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opt_value_list ::= 
            {
               CUP$JsonParser$result = case15(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array ::= LBRACKET opt_value_list RBRACKET 
            {
               CUP$JsonParser$result = case14(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // kv_list ::= kv_list COMMA kv_pair 
            {
               CUP$JsonParser$result = case13(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // kv_list ::= kv_pair 
            {
               CUP$JsonParser$result = case12(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opt_kv_list ::= kv_list 
            {
               CUP$JsonParser$result = case11(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opt_kv_list ::= 
            {
               CUP$JsonParser$result = case10(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // kv_pair ::= STRING_LITERAL COLON value 
            {
               CUP$JsonParser$result = case9(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // object ::= LBRACE opt_kv_list RBRACE 
            {
               CUP$JsonParser$result = case8(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // value ::= array 
            {
               CUP$JsonParser$result = case7(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // value ::= object 
            {
               CUP$JsonParser$result = case6(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // value ::= NULL 
            {
               CUP$JsonParser$result = case5(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // value ::= FALSE 
            {
               CUP$JsonParser$result = case4(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // value ::= TRUE 
            {
               CUP$JsonParser$result = case3(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // value ::= NUMBER_LITERAL 
            {
               CUP$JsonParser$result = case2(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // value ::= STRING_LITERAL 
            {
               CUP$JsonParser$result = case1(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= value EOF 
            {
               CUP$JsonParser$result = case0(
                 CUP$JsonParser$act_num,
                 CUP$JsonParser$parser,
                 CUP$JsonParser$stack,
                 CUP$JsonParser$top);
            }
          /* ACCEPT */
          CUP$JsonParser$parser.done_parsing();
          return CUP$JsonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
    //value_list ::= value_list COMMA value 
    java_cup.runtime.Symbol case18(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonArray RESULT =null;
		int listleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).left;
		int listright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).right;
		JsonArray list = (JsonArray) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).value;
		int vleft = CUP$JsonParser$stack.peek().left;
		int vright = CUP$JsonParser$stack.peek().right;
		JsonElement v = (JsonElement) CUP$JsonParser$stack.peek().value;
		
        list.add(v);
        RESULT = list;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value_list",4, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value_list ::= value 
    java_cup.runtime.Symbol case17(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonArray RESULT =null;
		int vleft = CUP$JsonParser$stack.peek().left;
		int vright = CUP$JsonParser$stack.peek().right;
		JsonElement v = (JsonElement) CUP$JsonParser$stack.peek().value;
		
        JsonArray array = new JsonArray();
        array.add(v);
        RESULT = array;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value_list",4, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //opt_value_list ::= value_list 
    java_cup.runtime.Symbol case16(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonArray RESULT =null;
		int listleft = CUP$JsonParser$stack.peek().left;
		int listright = CUP$JsonParser$stack.peek().right;
		JsonArray list = (JsonArray) CUP$JsonParser$stack.peek().value;
		
        RESULT = list;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("opt_value_list",3, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //opt_value_list ::= 
    java_cup.runtime.Symbol case15(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonArray RESULT =null;
		
        RESULT = new JsonArray();
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("opt_value_list",3, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //array ::= LBRACKET opt_value_list RBRACKET 
    java_cup.runtime.Symbol case14(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int arrayleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).left;
		int arrayright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).right;
		JsonArray array = (JsonArray) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).value;
		
        RESULT = array;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array",1, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //kv_list ::= kv_list COMMA kv_pair 
    java_cup.runtime.Symbol case13(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      List<Map.Entry<String,JsonElement>> RESULT =null;
		int listleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).left;
		int listright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).right;
		List<Map.Entry<String,JsonElement>> list = (List<Map.Entry<String,JsonElement>>) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).value;
		int itemleft = CUP$JsonParser$stack.peek().left;
		int itemright = CUP$JsonParser$stack.peek().right;
		Map.Entry<String,JsonElement> item = (Map.Entry<String,JsonElement>) CUP$JsonParser$stack.peek().value;
		
        list.add(item);
        RESULT = list;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("kv_list",6, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //kv_list ::= kv_pair 
    java_cup.runtime.Symbol case12(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      List<Map.Entry<String,JsonElement>> RESULT =null;
		int itemleft = CUP$JsonParser$stack.peek().left;
		int itemright = CUP$JsonParser$stack.peek().right;
		Map.Entry<String,JsonElement> item = (Map.Entry<String,JsonElement>) CUP$JsonParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(item);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("kv_list",6, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //opt_kv_list ::= kv_list 
    java_cup.runtime.Symbol case11(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      List<Map.Entry<String,JsonElement>> RESULT =null;
		int listleft = CUP$JsonParser$stack.peek().left;
		int listright = CUP$JsonParser$stack.peek().right;
		List<Map.Entry<String,JsonElement>> list = (List<Map.Entry<String,JsonElement>>) CUP$JsonParser$stack.peek().value;
		
        RESULT = list;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("opt_kv_list",7, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //opt_kv_list ::= 
    java_cup.runtime.Symbol case10(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      List<Map.Entry<String,JsonElement>> RESULT =null;
		
        RESULT = null;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("opt_kv_list",7, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //kv_pair ::= STRING_LITERAL COLON value 
    java_cup.runtime.Symbol case9(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      Map.Entry<String,JsonElement> RESULT =null;
		int keyleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).left;
		int keyright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).right;
		String key = (String) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2).value;
		int valueleft = CUP$JsonParser$stack.peek().left;
		int valueright = CUP$JsonParser$stack.peek().right;
		JsonElement value = (JsonElement) CUP$JsonParser$stack.peek().value;
		
        RESULT = Maps.immutableEntry(key, value);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("kv_pair",5, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //object ::= LBRACE opt_kv_list RBRACE 
    java_cup.runtime.Symbol case8(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int listleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).left;
		int listright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).right;
		List<Map.Entry<String,JsonElement>> list = (List<Map.Entry<String,JsonElement>>) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).value;
		
        JsonObject obj = new JsonObject();
        if (list != null) {
            for (Map.Entry<String, JsonElement> entry : list) {
                obj.add(entry.getKey(), entry.getValue());
            }
        }
        RESULT = obj;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("object",0, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= array 
    java_cup.runtime.Symbol case7(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int arrayleft = CUP$JsonParser$stack.peek().left;
		int arrayright = CUP$JsonParser$stack.peek().right;
		JsonElement array = (JsonElement) CUP$JsonParser$stack.peek().value;
		
        RESULT = array;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= object 
    java_cup.runtime.Symbol case6(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int objleft = CUP$JsonParser$stack.peek().left;
		int objright = CUP$JsonParser$stack.peek().right;
		JsonElement obj = (JsonElement) CUP$JsonParser$stack.peek().value;
		
        RESULT = obj;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= NULL 
    java_cup.runtime.Symbol case5(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		
        RESULT = JsonNull.INSTANCE;
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= FALSE 
    java_cup.runtime.Symbol case4(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		
        RESULT = new JsonPrimitive(false);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= TRUE 
    java_cup.runtime.Symbol case3(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		
        RESULT = new JsonPrimitive(true);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= NUMBER_LITERAL 
    java_cup.runtime.Symbol case2(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int numberleft = CUP$JsonParser$stack.peek().left;
		int numberright = CUP$JsonParser$stack.peek().right;
		String number = (String) CUP$JsonParser$stack.peek().value;
		
        RESULT = new JsonPrimitive(number);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //value ::= STRING_LITERAL 
    java_cup.runtime.Symbol case1(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      JsonElement RESULT =null;
		int strleft = CUP$JsonParser$stack.peek().left;
		int strright = CUP$JsonParser$stack.peek().right;
		String str = (String) CUP$JsonParser$stack.peek().value;
		
        RESULT = new JsonPrimitive(str);
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",2, CUP$JsonParser$stack.peek(), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
    //$START ::= value EOF 
    java_cup.runtime.Symbol case0(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$JsonParser$result;
      Object RESULT =null;
		int start_valleft = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).left;
		int start_valright = CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).right;
		JsonElement start_val = (JsonElement) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1).value;
		RESULT = start_val;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1), CUP$JsonParser$stack.peek(), RESULT);
      return CUP$JsonParser$result;

    }
}

